class LogicGate:

    def __init__(self,n):
        self._label = n
        self._output = None

    def getLabel(self):
        return self._label

    def getOutput(self):
        self._output = self.performGateLogic()
        return self._output

    
class BinaryGate(LogicGate):

    def __init__(self, n):
        LogicGate.__init__(self, n)

        self._PinA = None
        self._PinB = None

    def getPinA(self):
        if self._PinA == None:
            return int(input("Enter Pin A input for gate " + self.getLabel()+"--->"))
        else:
            return self._PinA.getFrom().getOutput()

    def getPinB(self):
        if self._PinB == None:
            return int(input("Enter Pin B input for gate " + self.getLabel()+"--->"))
        else:
            return self._PinB.getFrom().getOutput()

    def setNextPin(self, source):
        if self._PinA == None:
            self._PinA = source
        else:
            if self._PinB == None:
                self._PinB = source
            else:
                print("Cannot Connect: NO EMPTY PINS on this gate")

class UnaryGate(LogicGate):
        
        def __init__(self, n):
            LogicGate.__init__(self,n)

            self._pin = None

        def getPin(self):
            if self._pin == None:                
                return int(input("Enter Pin input for gate " + self.getLabel()+"--->"))
            else:
                return self._pin.getFrom().getOutput()

        def setNextPin(self, source):
            if self._pin == None:
                self._pin = source
            else:
                print("Cannot Connect: NO EMPTY PINS on this gate")

class AndGate(BinaryGate):

        def __init__(self, n):
            BinaryGate.__init__(self,n)

        def performGateLogic(self):

            a = self.getPinA()
            b = self.getPinB()

            if a==1 and b==1:
                return 1
            else:
                return 0

class NAndGate(AndGate):

    def performGateLogic(self):
        if super().performGateLogic() == 1: 
           return 0
        else:
            return 1
        




class OrGate(BinaryGate):

        def __init__(self, n):
            BinaryGate.__init__(self,n)

        def performGateLogic(self):

            a = self.getPinA()
            b = self.getPinB()

            if a==1 or b==1:
                return 1
            else:
                return 0

class NorGate(OrGate):

        def performGateLogic(self):
            if super().performGateLogic() == 1:
                return 0
            else:
                return 1




class NotGate(UnaryGate):

        def __init__(self, n):
            UnaryGate.__init__(self,n)

        def performGateLogic(self):

            a = self.getPin()

            if a==1:
                return 0
            else:
                return 1

class Connector:

    def __init__(self, fgate, tgate):
        self._fromGate = fgate
        self._toGate = tgate

        tgate.setNextPin(self)

    def getFrom(self):
        return self._fromGate

    def getTo(self):
        return self._toGate


def checkEquality():
    """
    NOT (( A and B) or (C and D))
    is the same as

    NOT( A and B ) and NOT (C and D)

    """




def main():
   g1 = AndGate("G1")
   g2 = AndGate("G2")
   g3 = OrGate("G3")
   g4 = NotGate("G4")
   c1 = Connector(g1,g3)
   c2 = Connector(g2,g3)
   c3 = Connector(g3,g4)
   print(g4.getOutput())

main()
